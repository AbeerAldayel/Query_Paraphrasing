/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package IR_Paraphrased;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import jenes.GeneticAlgorithm;
import jenes.chromosome.ObjectChromosome;
import jenes.population.Fitness;
import jenes.population.Individual;
import jenes.population.Population;
import jenes.stage.operator.common.OnePointCrossover;
import jenes.stage.operator.common.SimpleMutator;
import jenes.stage.operator.common.TournamentSelector;
import jenes.tutorials.utils.Utils;
import jenes.utils.Random;
import net.didion.jwnl.JWNLException;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.ar.ArabicAnalyzer;
import org.apache.lucene.analysis.ar.ArabicStemmer;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.index.IndexDeletionPolicy;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

/**
 *
 * @author Abeer
 */
public class GA_GUI1 extends javax.swing.JFrame {
private static int POPULATION_SIZE=40;
 private static int CHROMOSOME_LENGTH;
 private static int GENERATION_LIMIT=30;
private static GA_Fitness_ar fitness_fun =new GA_Fitness_ar();
private  static ArrayList Search_result=new ArrayList();
private static ArabicAnalyzer  analyzer;
static ABC_Pure_ar bee=new ABC_Pure_ar();
static Directory d;
    /**
     * @param args the command line arguments
     */
    /**
     * Creates new form ABC_GUI
     */
    public GA_GUI1() {
        initComponents();
 }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(238, 253, 253));
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IR_Paraphrased/size 300thesis.logo.f.g.jpg"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IR_Paraphrased/135-GA.QP.jpg"))); // NOI18N
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 100));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Search Results");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Paraprased Query ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel6.setText("milliseconds");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(752, 752, 752)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(614, 614, 614)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(731, 731, 731)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(518, 518, 518)
                        .addComponent(jLabel3)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(421, 421, 421)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(354, 354, 354)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)))))
                .addContainerGap(869, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(138, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
           String jT=jTextField1.getText();
           String inputQuery=jT;
            
            ArrayList termInQ=new ArrayList();
    termInQ.addAll( returnTokens(inputQuery,analyzer));
    //  termInQ.add("مرض");
    //         termInQ.add("فيروس");
    //          termInQ.add("اصاب");
    //         termInQ.add("إنسان");
       
     Thesaurus_arab_AWN g=new Thesaurus_arab_AWN();
     System.out.println("termInQ.size() "+termInQ.size() );
     CHROMOSOME_LENGTH=termInQ.size();
        if(termInQ.size()==4)
        {
         g.set_Syn1((String)termInQ.get(0));
          g.set_Syn2((String)termInQ.get(1));
           g.set_Syn3((String)termInQ.get(2));//disease
                        g.set_Syn4((String)termInQ.get(3));//book   
        }else if(termInQ.size()==3)
        {
         g.set_Syn1((String)termInQ.get(0));
          g.set_Syn2((String)termInQ.get(1));
           g.set_Syn3((String)termInQ.get(2));//disease
                         g.set_Syn4(" ");//book   
        }else if(termInQ.size()==2)
        {
         g.set_Syn1((String)termInQ.get(0));
          g.set_Syn2((String)termInQ.get(1));
           g.set_Syn3(" ");//disease
                         g.set_Syn4(" ");//book   
        }
               
        
            

        long startTime_of_program =new Date().getTime();
             //
            
          
              System.out.println("the Origenal Query is (The Effects of Financial crisis on business)");
              System.out.println("the Synonynoms list for 1'st lemma - Syn1 " );
        // PrintList(g.get_syn1());
              print_list(g.get_syn1());
            System.out.println("the Synonynoms list for 2'nd lemma - Syn2" );
          //PrintList(g.get_syn2());
           print_list(g.get_syn2());
             System.out.println("the Synonynoms list for 3'rd lemma - Syn3");
          // PrintList(g.get_syn3()); 
             print_list(g.get_syn3());
              System.out.println("the Synonynoms list for 4'th lemma - Syn4" );
              print_list(g.get_syn4());
           // PrintList(g.get_syn4()); 
            
            //Configuration GA_conf = new DefaultConfiguration();
             //IntegerChromosome(final int length, final int [] nlimitUpper_lower)
              
              // To deal with jenes integer encoding,bulid the limit arrray 
              int [] Gene_limits =new int[CHROMOSOME_LENGTH*2] ;
              // simplify this by dealing with 2 arraies
              int[]lower_limit=new int[CHROMOSOME_LENGTH];
              int[]uper_limit=new int[CHROMOSOME_LENGTH];
              
              for(int limit_i=0;limit_i<CHROMOSOME_LENGTH;limit_i++){
                  int size_of_syn=0;
                if(limit_i==0){
                 size_of_syn= g.get_syn1().size();  
                } 
                else if (limit_i==1){
                    size_of_syn= g.get_syn2().size();
                }
                else if (limit_i==2){
                    size_of_syn= g.get_syn3().size();
                }
                 else if (limit_i==3){
                    size_of_syn= g.get_syn4().size();
                }
                int position=limit_i * 2;
                  Gene_limits[position]=((limit_i+1)*1000 )+1;
                  Gene_limits[position+1]=(limit_i+1)*1000 +size_of_syn;
                  
                  lower_limit[limit_i]=((limit_i+1)*1000 )+1;
                  uper_limit[limit_i]=(limit_i+1)*1000 +size_of_syn;
              }
              //For building   initial population   prototype of solutions (sample)was used
     // Individual<IntegerChromosome> chrom = new Individual<IntegerChromosome>(new IntegerChromosome(CHROMOSOME_LENGTH, Gene_limits));
            //  Individual<IntegerChromosome> chrom = new Individual<IntegerChromosome>(new IntegerChromosome(CHROMOSOME_LENGTH, 0,5));
    //  Population<IntegerChromosome> pop = new Population<IntegerChromosome>(sample, POPULATION_SIZE);
      ObjectChromosome template = null;
      if(CHROMOSOME_LENGTH==2)
      {
    //   template =  new ObjectChromosome( Integer_allele_Set.createUniform(g.get_syn1().size(), 1001,1000 +g.get_syn1().size())
    //           , Integer_allele_Set.createUniform(g.get_syn2().size(), 2001,2000 +g.get_syn2().size()));
           template =  new ObjectChromosome( Integer_allele_Set.createlist(g.get_syn1().size(), 1001,1000 +g.get_syn1().size())
               , Integer_allele_Set.createlist(g.get_syn2().size(), 2001,2000 +g.get_syn2().size()));
        
      }
      if(CHROMOSOME_LENGTH==3)
      {
     template =  new ObjectChromosome( Integer_allele_Set.createlist(g.get_syn1().size(), 1001,1000 +g.get_syn1().size()),
                Integer_allele_Set.createlist(g.get_syn2().size(), 2001,2000 +g.get_syn2().size()),
                Integer_allele_Set.createlist(g.get_syn3().size(), 3001,3000 +g.get_syn3().size()));
       
      }
       if(CHROMOSOME_LENGTH==4)
      {
         template =  new ObjectChromosome( Integer_allele_Set.createlist(g.get_syn1().size(), 1001,1000 +g.get_syn1().size()),
                Integer_allele_Set.createlist(g.get_syn2().size(), 2001,2000 +g.get_syn2().size()),
                Integer_allele_Set.createlist(g.get_syn3().size(), 3001,3000 +g.get_syn3().size()),
                 Integer_allele_Set.createlist(g.get_syn4().size(), 4001,4000 +g.get_syn4().size())); }
       
       
       
     Individual<ObjectChromosome> ind = new Individual<ObjectChromosome>(template);

        Population<ObjectChromosome> pop = new Population<ObjectChromosome>(ind, POPULATION_SIZE);
     
     ArrayList population_test= (ArrayList) pop.getIndividuals();

     for(int n=0; n < population_test.size(); n++){
       //int[] at= (int[]) (population_test.get(n));

               Individual<ObjectChromosome> individual=(Individual<ObjectChromosome>) population_test.get(n);
       ObjectChromosome chrom = individual.getChromosome();
                
                int i1 ;
                int i2 ;
                int i3 ;
                int i4 ;
                
                 if(CHROMOSOME_LENGTH==2)
      {
    i1 = (Integer)chrom.getValue(0);
                i2 = (Integer)chrom.getValue(1);
                 System.out.println("[ "+ i1+" , "+ i2+" ]"); 
        
      }
      if(CHROMOSOME_LENGTH==3)
      {
     i1 = (Integer)chrom.getValue(0);
                i2 = (Integer)chrom.getValue(1);
                i3 = (Integer)chrom.getValue(2);
       System.out.println("[ "+ i1+" , "+ i2+" , "+ i3+"]");
      }
       if(CHROMOSOME_LENGTH==4)
      {
       i1 = (Integer)chrom.getValue(0);
                i2 = (Integer)chrom.getValue(1);
                i3 = (Integer)chrom.getValue(2);
       i4 = (Integer)chrom.getValue(3);
         System.out.println("[ "+ i1+" , "+ i2+" , "+ i3+" , "+ i4+" ]");
      }
                
     
     }

     fitness_fun.Set_thesaurus( g,g.get_syn1(),g.get_syn2(),g.get_syn3(),g.get_syn4());
     
     // fitness_fun.Set_thesaurus(g.get_syn1(),g.get_syn2(),g.get_syn3(),g.get_syn4());
    Fitness<ObjectChromosome> fitness = new Fitness<ObjectChromosome>(true) {

            @Override
            public void evaluate(Individual<ObjectChromosome> individual) {
              //  GA_Fitness fitness_fun =new GA_Fitness();
  
 

              ObjectChromosome chrom = (ObjectChromosome) individual.getChromosome();
                
    //     int i3 = (Integer)chrom.getValue(2);
              //   int i4 = (Integer)chrom.getValue(3);
              //  System.out.print("[ "+ i1+" , "+ i2+" , "+ i3+" , "+ i4+" ] fitness= ");
             //System.out.print("[ "+ i1+" , "+ i2+" , "+ i3+"] fitness=");
    //           System.out.print("[ "+ i1+" , "+ i2+" ] fitness= "); 
               
                int i1 ;
                int i2 ;
                int i3 ;
                int i4 ;
                
                 if(CHROMOSOME_LENGTH==2)
      {
    i1 = (Integer)chrom.getValue(0);
                i2 = (Integer)chrom.getValue(1);
                  System.out.print("[ "+ i1+" , "+ i2+" ] fitness= "); 
        
      }
      if(CHROMOSOME_LENGTH==3)
      {
     i1 = (Integer)chrom.getValue(0);
                i2 = (Integer)chrom.getValue(1);
                i3 = (Integer)chrom.getValue(2);
       System.out.print("[ "+ i1+" , "+ i2+" , "+ i3+"] fitness="); 
      }
       if(CHROMOSOME_LENGTH==4)
      {
       i1 = (Integer)chrom.getValue(0);
                i2 = (Integer)chrom.getValue(1);
                i3 = (Integer)chrom.getValue(2);
       i4 = (Integer)chrom.getValue(3);
         System.out.print("[ "+ i1+" , "+ i2+" , "+ i3+" , "+ i4+" ] fitness= ");
      }
               
               
               
          fitness_fun.evaluateIndividual(individual);  
          System.out.println();
     
     }
        
            };
    System.out.println("ga algorithm");
    GeneticAlgorithm<ObjectChromosome> ga = new GeneticAlgorithm<ObjectChromosome>( fitness, pop, GENERATION_LIMIT);
        ga.set_syn1(g.get_syn1());  
       ga.set_syn2(g.get_syn2());
       ga.set_syn3(g.get_syn3()); 
       ga.set_syn4(g.get_syn4()); 

    //  GeneticAlgorithm <ObjectChromosome> ga = new GeneticAlgorithm<ObjectChromosome>(pop, GENERATION_LIMIT) {
    //      
    // @Override
    //      public void evaluateIndividual(Individual<ObjectChromosome> individual)
    // {
    // GA_Fitness fitness_fun =new GA_Fitness();
    // 
    // fitness_fun.evaluateIndividual(individual);
    // }
    //     
    //     
    // };
     //##########################################################################################
      Random.getInstance().setStandardSeed();
      ga.set_enable_ABC(false);
            ga.set_Query_Length(CHROMOSOME_LENGTH);//to assaign D value in ABC 
            ga.set_limits(lower_limit, uper_limit);
            ga.addStage(new TournamentSelector<ObjectChromosome>(10));
            ga.addStage(new OnePointCrossover<ObjectChromosome>(0.25));
            ga.addStage(new SimpleMutator<ObjectChromosome>(0.1));
               ga.setElitism(5);
            //ga.setElitismStrategy(GeneticAlgorithm.ElitismStrategy.WORST);//I add this as another choice of random
           // ga.setBiggerIsBetter(true);
            System.out.println("evolve");  
            ga.evolve();
           // ga.evolve();
           
    //         for(int n=0; n < population_test.size(); n++){
    //   //int[] at= (int[]) (population_test.get(n));
    //
    //           Individual<ObjectChromosome> individual=(Individual<ObjectChromosome>) population_test.get(n);
    //   ObjectChromosome chrom = individual.getChromosome();
    //            
    //            int i1 = (Integer)chrom.getValue(0);
    //            int i2 = (Integer)chrom.getValue(1);
    //            
    //            
    //            System.out.println("[ "+ i1+" , "+ i2+" ] ");
    // }
    // 
            Population p=ga.getHistoryAt(-1);
            System.out.println("age of population  "+p.getAge());
     Population.Statistics stats = ga.getCurrentPopulation().getStatistics(); 

    Population.Statistics.Group<ObjectChromosome> legals = ga.getCurrentPopulation().getStatistics().getGroup(Population.LEGALS);
            
            for(Individual inds : legals){
              ObjectChromosome chrom = (ObjectChromosome) inds.getChromosome();
                
       
       int i1 ;
                int i2 ;
                int i3 ;
                int i4 ;
                
                 if(CHROMOSOME_LENGTH==2)
      {
    i1 = (Integer)chrom.getValue(0);
                i2 = (Integer)chrom.getValue(1);
                 System.out.println("[ "+ i1+" , "+ i2+" ]");
        
      }
      if(CHROMOSOME_LENGTH==3)
      {
     i1 = (Integer)chrom.getValue(0);
                i2 = (Integer)chrom.getValue(1);
                i3 = (Integer)chrom.getValue(2);
       System.out.println("[ "+ i1+" , "+ i2+" , "+ i3+"]");
      }
       if(CHROMOSOME_LENGTH==4)
      {
       i1 = (Integer)chrom.getValue(0);
                i2 = (Integer)chrom.getValue(1);
                i3 = (Integer)chrom.getValue(2);
       i4 = (Integer)chrom.getValue(3);
         System.out.println("[ "+ i1+" , "+ i2+" , "+ i3+" , "+ i4+" ]");
      }
                
            }
         //   Statistics stats = ga.getCurrentPopulation().getStatistics();
            GeneticAlgorithm.Statistics algostats = ga.getStatistics();

           // Group legals = stats.getGroup(Population.LEGALS);
            
            System.out.println("Solution: ");
            
          if(CHROMOSOME_LENGTH==2)
      {
    System.out.println((int) (legals.get(0).getChromosome().getValue(0))+" , "+(int) (legals.get(0).getChromosome().getValue(1)));
        
      }
      if(CHROMOSOME_LENGTH==3)
      {
    System.out.println((int) (legals.get(0).getChromosome().getValue(0))+" , "+(int) (legals.get(0).getChromosome().getValue(1))+" , "+(int) (legals.get(0).getChromosome().getValue(2)));
         
      
      }
       if(CHROMOSOME_LENGTH==4)
      {
       System.out.println((int) (legals.get(0).getChromosome().getValue(0))+" , "+(int) (legals.get(0).getChromosome().getValue(1))+" , "+(int) (legals.get(0).getChromosome().getValue(2))+" , "+(int) (legals.get(0).getChromosome().getValue(3)));
     
      }
            
            Utils.printStatistics(stats);
      
      //#########################################################################################
      
      
      
      
    //set max min for each gene(the maximum will be retrived from Galgorthm class (Syn1 arraylist length)) 
       
        
       // conf=new DefaultConfiguration();
        // Here we specify a fitness evaluator where lower values means a better fitness
                    
        
        //conf.setFitnessFunction( myFunc );
    //    List l=new ArrayList();
    //    //l=conf.getGeneticOperators();
    //    for(int u=0;u<l.size();u++)
    //    {
    //        System.out.println( l.get(u).getClass().toString());
    //    
    //        if (u==1){
    //   System.out.println( l.get(u).getClass().getDeclaredMethods().toString());}}
            
        //********************************************
    //	conf.getGeneticOperators().clear();
    //MutationOperator swapper = new SwappingMutationOperator(conf);
    //conf.addGeneticOperator(swapper);	
    //******************************************************
    // Only use the swapping operator. Other operations makes no sense here
                    // and the size of the chromosome must remain constant
                    //conf.getGeneticOperators().clear();
                    //SwappingMutationOperator swapper = new SwappingMutationOperator(conf);
                    //conf.addGeneticOperator(swapper);

            // We are only interested in the most fittest individual
            //conf.setPreservFittestIndividual(true);
                    //conf.setKeepPopulationSizeConstant(false);

               
    //  sampleGenes[0] = new IntegerGene(conf, 1001, 1000+g.get_syn1().size() );  //Synonyms of 1st token from query
    //  
    //  sampleGenes[1] = new IntegerGene(conf, 2001, 2000+g.get_syn2().size() );  // Synonyms of 2nd token from query
    //  sampleGenes[2] = new IntegerGene(conf, 3001, 3000+g.get_syn3().size() );  // Synonyms of 3rd token from query
    //  sampleGenes[3] = new IntegerGene(conf, 4001, 4000+g.get_syn4().size() );  // Synonyms of 4th token from query

    //  Chromosome sampleChromosome = new Chromosome(conf, sampleGenes );
    //  int pop_Siz=100;
    //conf.setPopulationSize( pop_Siz );
    //conf.setKeepPopulationSizeConstant(true);
    //
    //  conf.setSampleChromosome( sampleChromosome );
    // 
    // conf.getNaturalSelectors(false).clear();
    //BestChromosomesSelector bcs = new BestChromosomesSelector(conf, 1.0d);
    //bcs.setDoubletteChromosomesAllowed(false);
    //conf.addNaturalSelector(bcs, false);
    //
    //
    //  conf.setRandomGenerator(new StockRandomGenerator());
    //
    //      
    //  conf.verifyStateIsValid();
    //  
    //
    //    // ------------------------------------------------
    //   int MAX_ALLOWED_EVOLUTIONS=50;
    //    Genotype population = Genotype.randomInitialGenotype(conf);
    //    System.out.println("After encoding the chromosomes into integers ");
    // System.out.println("with following GA Configuration ");
    // System.out.println("PopulationSize  "+pop_Siz);
    // System.out.println("MAX_ALLOWED_EVOLUTIONS "+MAX_ALLOWED_EVOLUTIONS);
        // -----------------------------------------------------------------------
            // Evolve the population. Since we don't know what the best answer
        // is going to be, we just evolve the max number of times.
        // ---------------------------------------------------------------
       
    //    long startTimeg = System.currentTimeMillis();
    //    for (int i = 0; i < MAX_ALLOWED_EVOLUTIONS; i++) {
    //        System.out.println("EVOLUTIONS "+i);
    //      if (!uniqueChromosomes(population.getPopulation())) {
    //        throw new RuntimeException("Invalid state in generation "+i);
    //      }
    //      population.evolve();
    //    }
    //    long endTimeg = System.currentTimeMillis();
    //    System.out.println("Total evolution time: " + ( endTimeg - startTimeg)
    //                       + " ms");
    //   
        // Display the best solution we found.
        // -----------------------------------
       // IChromosome bestSolutionSoFar = population.getFittestChromosome();
       // IChromosome bestSolutionSoFar = population.getFittestChromosome();
    //System.out.printf("\n\nThe best solution (fitness : %f) contained thefollowing: \n", bestSolutionSoFar.getFitnessValue());


    //for(Gene geg: bestSolutionSoFar.getGenes()) {
      //  int app = (int) geg.getAllele();
       // System.out.print(app + ", ");
    //}

        //--------
    //    ArrayList bestSolution =new ArrayList();
    //    
    ////            bestSolution.addAll(population.getFittestChromosomes(5));
    //   // System.out.println("The best solution has a fitness value of " +
    //                      // bestSolutionSoFar.getFitnessValue());
    //   System.out.println("The best 6 FittestChromosomes solutions" );
    //            System.out.println("they contain the following: parphrased Queries ");
    //    System.out.println("\t" );
    //   
    //     //**************search for Query**********************
    //   // System.out.println(bestSolution.size());
       ArrayList Paraphrased_Query=new ArrayList();
    //    
    //    for(int t=0; t<bestSolution.size();t++)
    //    {
    //     
    ////  IChromosome chromosome=(IChromosome)(bestSolution.get(t));
    //  System.out.println("thebest Solution/ chromosome number "+t);
    ////   System.out.println((int)chromosome.getGene(0).getAllele() +" "+(int)chromosome.getGene(1).getAllele()+" "+(int)chromosome.getGene(2).getAllele()+" "+(int)chromosome.getGene(3).getAllele() );
    ////
       String word1;
       String word2;
      String word3;
      String word4;
    // 
    //System.out.println(word1+" "+word2+" "+word3+" "+word4);
    //System.out.println(word1+" "+word2);
    // Paraphrased_Query.add(word1+" "+word2);
    //Paraphrased_Query.add(word1+" "+word2+" "+word3);
     //  System.out.println(word1+" "+word2+" "+word3+" "+word4);
    //Paraphrased_Query.add(word1+" "+word2+" "+word3+" "+word4);
    ////   
    //Search (" +"+word1+" +"+word2+" +"+word3+" +"+word4,analyzer,d,Search_result );
    //Search (" +"+word1+" +"+word2,analyzer,d,Search_result );
    ////Search (" +"+word1+" +"+word2+" +"+word3,analyzer,d,Search_result );
    // 
    // System.out.println("سباق الفروسيه");
    // Paraphrased_Query.add("سباق الفروسيه");
    // String query="سباق الفروسيه";
    // Search(query ,analyzer,d,Search_result);
     
     if(CHROMOSOME_LENGTH==2)
      {
     word1= g.lookUp_syn((int)legals.get(1).getChromosome().getValue(0));
       word2= g.lookUp_syn((int) legals.get(1).getChromosome().getValue(1));
        System.out.println(word1+" "+word2);
        
           Paraphrased_Query.add(termInQ.get(0) +" "+termInQ.get(1));
     Paraphrased_Query.add(word1+" "+word2);
     
     Search (" +"+word1+" +"+word2,analyzer,d,Search_result );
       jLabel4.setText(" "+word1+" "+word2);
      System.out.println();
       System.out.println(termInQ.get(0) +" "+termInQ.get(1));
    Search (termInQ.get(0) +" "+termInQ.get(1),analyzer,d,Search_result );
                }
      if(CHROMOSOME_LENGTH==3)
      {

       word1= g.lookUp_syn((int)legals.get(1).getChromosome().getValue(0));
        word2= g.lookUp_syn((int) legals.get(1).getChromosome().getValue(1));
       word3= g.lookUp_syn((int) legals.get(1).getChromosome().getValue(2));
       
       System.out.println(word1+" "+word2+" "+word3);
        
           Paraphrased_Query.add(termInQ.get(0) +" "+termInQ.get(1)+" "+termInQ.get(2));
     Paraphrased_Query.add(word1+" "+word2+" "+word3);
       jLabel4.setText(" "+word1+" "+word2+" "+word3);
     Search (" +"+word1+" +"+word2+" "+word3,analyzer,d,Search_result );
      System.out.println();
       System.out.println(termInQ.get(0) +" "+termInQ.get(1)+" "+termInQ.get(2));
    Search (termInQ.get(0) +" "+termInQ.get(1)+" "+termInQ.get(2),analyzer,d,Search_result );
       
      }
       if(CHROMOSOME_LENGTH==4)
      {
       word1= g.lookUp_syn((int)legals.get(1).getChromosome().getValue(0));
        word2= g.lookUp_syn((int) legals.get(1).getChromosome().getValue(1));
       word3= g.lookUp_syn((int) legals.get(1).getChromosome().getValue(2));
       word4= g.lookUp_syn((int) legals.get(1).getChromosome().getValue(3));
       
       System.out.println(word1+" "+word2+" "+word3+" "+word4);
        
           Paraphrased_Query.add(termInQ.get(0) +" "+termInQ.get(1)+" "+termInQ.get(2)+" "+termInQ.get(3));
     Paraphrased_Query.add(word1+" "+word2+" "+word3+" "+word4);
     
     Search (" +"+word1+" +"+word2+" "+word3+" "+" "+word4,analyzer,d,Search_result );
       jLabel4.setText(" "+word1+" "+word2+" "+word3+"  "+word4);
      System.out.println();
       System.out.println(termInQ.get(0) +" "+termInQ.get(1)+" "+termInQ.get(2)+" "+termInQ.get(3));
    Search (termInQ.get(0) +" "+termInQ.get(1)+" "+termInQ.get(2)+" "+termInQ.get(3),analyzer,d,Search_result );
      }
                
    //  //&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
        System.out.println("the final query list");
    System.out.println(Paraphrased_Query);
    // 
     
      
       String final_doc_list=remove_dublict(Search_result);
  //jLabel9.setText(final_doc_list);
  jTextArea1.setText(final_doc_list);
  
       long estimatedTime =  new Date().getTime();  
       double final_time=(estimatedTime-startTime_of_program)/1000;
        double numseconds = (((final_time % 31536000) % 86400) % 3600) % 60;
          System.out.println(" final estimatedTime = "+ numseconds);
           System.out.println(" final estimatedTime in millisec = "+ (estimatedTime-startTime_of_program));
           jLabel7.setText(String.valueOf(estimatedTime-startTime_of_program)); 
       g.close(); 
        } catch (ParseException ex) {
            Logger.getLogger(GA_GUI1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JWNLException ex) {
            Logger.getLogger(GA_GUI1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GA_GUI1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GA_GUI1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GA_GUI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GA_GUI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GA_GUI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GA_GUI1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Search_result=new ArrayList();

    // 0. Specify the analyzer for tokenizing text.
    //    The same analyzer should be used for indexing and searching
          analyzer = new ArabicAnalyzer(Version.LUCENE_35);
       
              // 1. create the index
   //**************indexer start***********************
         //fileDir the directory that contains thefiles to be indexed
   File   fileDir  = new File("C:\\files_to_index_arb");
   
    //indexDir is the directory that hosts Lucene's index files
   File   indexDir = new File("C:\\luceneIndex_arb");
IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_35, analyzer);
// To store an index on disk 
 d = FSDirectory.open(indexDir);

//   FitnessFunction myFunc =new paraphraseFitness();
//  
paraphraseFitness f=new paraphraseFitness();
   f.set_Characters();
        long startTime;
        int r=1 ;
        if (r == 0){
       //development training     
             //**** I add this line to create the instance of deletion policy
IndexDeletionPolicy deletionPolicy = new KeepOnlyLastCommitDeletionPolicy(); 

            try (IndexWriter indexWriter = new IndexWriter(d,analyzer,deletionPolicy,IndexWriter.MaxFieldLength.UNLIMITED))
                    
                    //IndexWriter indexWriter = new IndexWriter(d,config)) 
            
            {
               
                
            File[] textFiles  = fileDir.listFiles();
            startTime = new Date().getTime();
            for(int i = 0; i < textFiles.length; i++){
            if(textFiles[i].isFile() && textFiles[i].getName().endsWith(".txt"))
                // if(textFiles[i].isFile())
              {  
                System.out.println("File " + textFiles[i].getCanonicalPath() 
                       + " is being indexed");
                Reader textReader = new FileReader(textFiles[i]);
                Document document = new Document();
                document.add(new Field("content",textReader));
                document.add(new Field("path",textFiles[i].getPath(),Field.Store.YES,Field.Index.ANALYZED));
           
                indexWriter.addDocument(document);
              }
            }
            indexWriter.optimize();
        }
   long endTime = new Date().getTime();

   System.out.println("It took " + (endTime - startTime) 
              + " milliseconds to create an index for the files in the directory "
              + fileDir.getPath());
        }//end if r
   //*************** indexer end**********************
     //******************setup the Genetic algorithm configurations
        //first we will work with our created class Galgorithm and set it up with Original Query 
        // //the basic query is ( Effects of Financial crisis on the business )
 //orgQuery[0]="Effects";
 //orgQuery[1]="Financial";
 //orgQuery[2]="crisis";
 //orgQuery[3]="business";
   //causes of Scurvy disease
   
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GA_GUI1().setVisible(true);
            }
        });
    }
    
     public static void Search (String Q,ArabicAnalyzer analyzer,Directory d,ArrayList Search_result) throws IOException, ParseException
{
 //**************search for Query**********************
   String querystr = Q;
   // the "title" arg specifies the default field to use
    // when no field is explicitly specified in the query.
   //System.out.println(Q);
   Query q = new QueryParser(Version.LUCENE_35, "content", analyzer).parse(querystr);
   //System.out.println(q);
   int hitsPerPage = 10;
   // d is the directory that hosts Lucene's index files
   IndexReader reader = IndexReader.open(d);
       try (IndexSearcher searcher = new IndexSearcher(reader)) {
          TopScoreDocCollector collector = TopScoreDocCollector.create(hitsPerPage, true);
           searcher.search(q, collector);
           ScoreDoc[] hits = collector.topDocs().scoreDocs;
           
               // 4. display results
            System.out.println("Found " + hits.length + " hits.");
            for(int i=0;i<hits.length;++i) {
                int docId = hits[i].doc;
                Document docu = searcher.doc(docId);
                System.out.println((i + 1) + ". " + docu.get("path"));
                Search_result.add(docu.get("path"));
       }//end for of display result 
       }//end try for index searcher
   
}
 
  
  public static String remove_dublict(ArrayList arrayList1)
  {
 int q,z;  
String  document_f="";
for(q = 0; q < arrayList1.size() ; q++) {  
    for(z = 0; z < arrayList1.size(); z++) {
        if(arrayList1.get(q).toString().equals(arrayList1.get(z).toString())&& z !=q) {
            arrayList1.remove(z);
        }
    }
    
}

System.out.println("final result after remove dublicate");
for(int y=0;y<arrayList1.size();y++)
{
System.out.println(arrayList1.get(y).toString());
document_f=arrayList1.get(y).toString()+"\n "+document_f;

}
 return document_f;
  }//end print
   public static void print_list(ArrayList list1)
   {
       for(int y=0;y<list1.size();y++)
{
System.out.println(list1.get(y).toString());
}
   }


 private static ArrayList  returnTokens(String string, ArabicAnalyzer analyzer) throws IOException {
      //  System.out.println("Using " + analyzer.getClass().getName());
    ArrayList arTerm=new ArrayList();
        TokenStream ts = analyzer.tokenStream("default", new StringReader(string));
        ArabicStemmer stemm=new ArabicStemmer();
       
         //TokenStream ts = analyzer.("default", new StringReader(string));
        OffsetAttribute offsetAttribute = ts.addAttribute(OffsetAttribute.class);
//         WhitespaceTokenizer  tt;
//        tt = new WhitespaceTokenizer(Version.LUCENE_35, new StringReader(string));
        CharTermAttribute charTermAttribute = ts.addAttribute(CharTermAttribute.class);

        while(ts.incrementToken()) {
           
            String term = charTermAttribute.toString();
             System.out.println("term without stem"+term);
             char[]ss;
            
           ss = new char[term.length()];
         ss=term.toCharArray();
       
                 int stem = stemm.stem(ss, ss.length);
       String strs = "";
       for(int r=0;r<stem;r++){
         strs =  strs  + ss[r];   
       }
            
            arTerm.add(strs);
            System.out.println(strs);
        }
       return arTerm;
    } 
    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
